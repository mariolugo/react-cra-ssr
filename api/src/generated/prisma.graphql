# source: https://us1.prisma.sh/mario-lugo-28cf57/database/dev
# timestamp: Wed Oct 31 2018 15:09:06 GMT-0600 (CST)

type AggregateChatRoom {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateRequest {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type ChatRoom implements Node {
  id: ID!
  room: Room
  request: Request
  owner: ID
  withUser: User
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ChatRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatRoomEdge]!
  aggregate: AggregateChatRoom!
}

input ChatRoomCreateInput {
  owner: ID
  room: RoomCreateOneInput
  request: RequestCreateOneInput
  withUser: UserCreateOneInput
}

"""An edge in a connection."""
type ChatRoomEdge {
  """The item at the end of the edge."""
  node: ChatRoom!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatRoomOrderByInput {
  id_ASC
  id_DESC
  owner_ASC
  owner_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatRoomPreviousValues {
  id: ID!
  owner: ID
  createdAt: DateTime!
}

type ChatRoomSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoom
  updatedFields: [String!]
  previousValues: ChatRoomPreviousValues
}

input ChatRoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatRoomWhereInput
}

input ChatRoomUpdateInput {
  owner: ID
  room: RoomUpdateOneInput
  request: RequestUpdateOneInput
  withUser: UserUpdateOneInput
}

input ChatRoomUpdateManyMutationInput {
  owner: ID
}

input ChatRoomWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  owner: ID

  """All values that are not equal to given value."""
  owner_not: ID

  """All values that are contained in given list."""
  owner_in: [ID!]

  """All values that are not contained in given list."""
  owner_not_in: [ID!]

  """All values less than the given value."""
  owner_lt: ID

  """All values less than or equal the given value."""
  owner_lte: ID

  """All values greater than the given value."""
  owner_gt: ID

  """All values greater than or equal the given value."""
  owner_gte: ID

  """All values containing the given string."""
  owner_contains: ID

  """All values not containing the given string."""
  owner_not_contains: ID

  """All values starting with the given string."""
  owner_starts_with: ID

  """All values not starting with the given string."""
  owner_not_starts_with: ID

  """All values ending with the given string."""
  owner_ends_with: ID

  """All values not ending with the given string."""
  owner_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  room: RoomWhereInput
  request: RequestWhereInput
  withUser: UserWhereInput
}

input ChatRoomWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

type Link implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateOneWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
}

input LinkCreateWithoutPostedByInput {
  description: String!
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateWithoutVotesInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateManyMutationInput {
  description: String
  url: String
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  delete: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
}

input LinkUpdateOneRequiredWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
  update: LinkUpdateWithoutVotesDataInput
  upsert: LinkUpsertWithoutVotesInput
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput!
  create: LinkCreateWithoutVotesInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input LinkWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  message: String!
  chat: Request
  author: User
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  message: String!
  chat: RequestCreateOneInput
  author: UserCreateOneInput
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  message_ASC
  message_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  message: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  message: String
  chat: RequestUpdateOneInput
  author: UserUpdateOneInput
}

input MessageUpdateManyMutationInput {
  message: String
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  chat: RequestWhereInput
  author: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createVote(data: VoteCreateInput!): Vote!
  createLink(data: LinkCreateInput!): Link!
  createChatRoom(data: ChatRoomCreateInput!): ChatRoom!
  createMessage(data: MessageCreateInput!): Message!
  createRoom(data: RoomCreateInput!): Room!
  createRequest(data: RequestCreateInput!): Request!
  createUser(data: UserCreateInput!): User!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateChatRoom(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoom
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateRequest(data: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteUser(where: UserWhereUniqueInput!): User
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  upsertChatRoom(where: ChatRoomWhereUniqueInput!, create: ChatRoomCreateInput!, update: ChatRoomUpdateInput!): ChatRoom!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  upsertRequest(where: RequestWhereUniqueInput!, create: RequestCreateInput!, update: RequestUpdateInput!): Request!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  updateManyChatRooms(data: ChatRoomUpdateManyMutationInput!, where: ChatRoomWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  updateManyRequests(data: RequestUpdateManyMutationInput!, where: RequestWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  deleteManyChatRooms(where: ChatRoomWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  deleteManyRequests(where: RequestWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  requests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  vote(where: VoteWhereUniqueInput!): Vote
  link(where: LinkWhereUniqueInput!): Link
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  message(where: MessageWhereUniqueInput!): Message
  room(where: RoomWhereUniqueInput!): Room
  request(where: RequestWhereUniqueInput!): Request
  user(where: UserWhereUniqueInput!): User
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  chatRoomsConnection(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  requestsConnection(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequestConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Request implements Node {
  id: ID!
  createdBy: User
  requestUser: ID!
  status: Int
  roomId: Room
  createdAt: DateTime!
}

"""A connection to a list of items."""
type RequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestEdge]!
  aggregate: AggregateRequest!
}

input RequestCreateInput {
  requestUser: ID!
  status: Int
  createdBy: UserCreateOneInput
  roomId: RoomCreateOneInput
}

input RequestCreateOneInput {
  create: RequestCreateInput
  connect: RequestWhereUniqueInput
}

"""An edge in a connection."""
type RequestEdge {
  """The item at the end of the edge."""
  node: Request!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RequestOrderByInput {
  id_ASC
  id_DESC
  requestUser_ASC
  requestUser_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RequestPreviousValues {
  id: ID!
  requestUser: ID!
  status: Int
  createdAt: DateTime!
}

type RequestSubscriptionPayload {
  mutation: MutationType!
  node: Request
  updatedFields: [String!]
  previousValues: RequestPreviousValues
}

input RequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RequestWhereInput
}

input RequestUpdateDataInput {
  requestUser: ID
  status: Int
  createdBy: UserUpdateOneInput
  roomId: RoomUpdateOneInput
}

input RequestUpdateInput {
  requestUser: ID
  status: Int
  createdBy: UserUpdateOneInput
  roomId: RoomUpdateOneInput
}

input RequestUpdateManyMutationInput {
  requestUser: ID
  status: Int
}

input RequestUpdateOneInput {
  create: RequestCreateInput
  connect: RequestWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RequestUpdateDataInput
  upsert: RequestUpsertNestedInput
}

input RequestUpsertNestedInput {
  update: RequestUpdateDataInput!
  create: RequestCreateInput!
}

input RequestWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  requestUser: ID

  """All values that are not equal to given value."""
  requestUser_not: ID

  """All values that are contained in given list."""
  requestUser_in: [ID!]

  """All values that are not contained in given list."""
  requestUser_not_in: [ID!]

  """All values less than the given value."""
  requestUser_lt: ID

  """All values less than or equal the given value."""
  requestUser_lte: ID

  """All values greater than the given value."""
  requestUser_gt: ID

  """All values greater than or equal the given value."""
  requestUser_gte: ID

  """All values containing the given string."""
  requestUser_contains: ID

  """All values not containing the given string."""
  requestUser_not_contains: ID

  """All values starting with the given string."""
  requestUser_starts_with: ID

  """All values not starting with the given string."""
  requestUser_not_starts_with: ID

  """All values ending with the given string."""
  requestUser_ends_with: ID

  """All values not ending with the given string."""
  requestUser_not_ends_with: ID
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  roomId: RoomWhereInput
}

input RequestWhereUniqueInput {
  id: ID
}

type Room implements Node {
  id: ID!
  title: String!
  description: String!
  city: String!
  address: String!
  latLng: Json
  country: String!
  amenities: Json!
  type: String!
  males: Int
  females: Int
  rules: Json!
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  postedBy: User
  images: Json!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type RoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  title: String!
  description: String!
  city: String!
  address: String!
  latLng: Json
  country: String!
  amenities: Json!
  type: String!
  males: Int
  females: Int
  rules: Json!
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json!
  postedBy: UserCreateOneWithoutRoomsInput
}

input RoomCreateManyWithoutPostedByInput {
  create: [RoomCreateWithoutPostedByInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateOneInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutPostedByInput {
  title: String!
  description: String!
  city: String!
  address: String!
  latLng: Json
  country: String!
  amenities: Json!
  type: String!
  males: Int
  females: Int
  rules: Json!
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json!
}

"""An edge in a connection."""
type RoomEdge {
  """The item at the end of the edge."""
  node: Room!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  city_ASC
  city_DESC
  address_ASC
  address_DESC
  latLng_ASC
  latLng_DESC
  country_ASC
  country_DESC
  amenities_ASC
  amenities_DESC
  type_ASC
  type_DESC
  males_ASC
  males_DESC
  females_ASC
  females_DESC
  rules_ASC
  rules_DESC
  bed_ASC
  bed_DESC
  fromDate_ASC
  fromDate_DESC
  toDate_ASC
  toDate_DESC
  minMonths_ASC
  minMonths_DESC
  price_ASC
  price_DESC
  bills_ASC
  bills_DESC
  images_ASC
  images_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoomPreviousValues {
  id: ID!
  title: String!
  description: String!
  city: String!
  address: String!
  latLng: Json
  country: String!
  amenities: Json!
  type: String!
  males: Int
  females: Int
  rules: Json!
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json!
  createdAt: DateTime!
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
}

input RoomUpdateDataInput {
  title: String
  description: String
  city: String
  address: String
  latLng: Json
  country: String
  amenities: Json
  type: String
  males: Int
  females: Int
  rules: Json
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json
  postedBy: UserUpdateOneWithoutRoomsInput
}

input RoomUpdateInput {
  title: String
  description: String
  city: String
  address: String
  latLng: Json
  country: String
  amenities: Json
  type: String
  males: Int
  females: Int
  rules: Json
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json
  postedBy: UserUpdateOneWithoutRoomsInput
}

input RoomUpdateManyMutationInput {
  title: String
  description: String
  city: String
  address: String
  latLng: Json
  country: String
  amenities: Json
  type: String
  males: Int
  females: Int
  rules: Json
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json
}

input RoomUpdateManyWithoutPostedByInput {
  create: [RoomCreateWithoutPostedByInput!]
  connect: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  delete: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutPostedByInput!]
}

input RoomUpdateOneInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RoomUpdateDataInput
  upsert: RoomUpsertNestedInput
}

input RoomUpdateWithoutPostedByDataInput {
  title: String
  description: String
  city: String
  address: String
  latLng: Json
  country: String
  amenities: Json
  type: String
  males: Int
  females: Int
  rules: Json
  bed: String
  fromDate: DateTime
  toDate: DateTime
  minMonths: Int
  price: Int
  bills: Boolean
  images: Json
}

input RoomUpdateWithWhereUniqueWithoutPostedByInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutPostedByDataInput!
}

input RoomUpsertNestedInput {
  update: RoomUpdateDataInput!
  create: RoomCreateInput!
}

input RoomUpsertWithWhereUniqueWithoutPostedByInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutPostedByDataInput!
  create: RoomCreateWithoutPostedByInput!
}

input RoomWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  males: Int

  """All values that are not equal to given value."""
  males_not: Int

  """All values that are contained in given list."""
  males_in: [Int!]

  """All values that are not contained in given list."""
  males_not_in: [Int!]

  """All values less than the given value."""
  males_lt: Int

  """All values less than or equal the given value."""
  males_lte: Int

  """All values greater than the given value."""
  males_gt: Int

  """All values greater than or equal the given value."""
  males_gte: Int
  females: Int

  """All values that are not equal to given value."""
  females_not: Int

  """All values that are contained in given list."""
  females_in: [Int!]

  """All values that are not contained in given list."""
  females_not_in: [Int!]

  """All values less than the given value."""
  females_lt: Int

  """All values less than or equal the given value."""
  females_lte: Int

  """All values greater than the given value."""
  females_gt: Int

  """All values greater than or equal the given value."""
  females_gte: Int
  bed: String

  """All values that are not equal to given value."""
  bed_not: String

  """All values that are contained in given list."""
  bed_in: [String!]

  """All values that are not contained in given list."""
  bed_not_in: [String!]

  """All values less than the given value."""
  bed_lt: String

  """All values less than or equal the given value."""
  bed_lte: String

  """All values greater than the given value."""
  bed_gt: String

  """All values greater than or equal the given value."""
  bed_gte: String

  """All values containing the given string."""
  bed_contains: String

  """All values not containing the given string."""
  bed_not_contains: String

  """All values starting with the given string."""
  bed_starts_with: String

  """All values not starting with the given string."""
  bed_not_starts_with: String

  """All values ending with the given string."""
  bed_ends_with: String

  """All values not ending with the given string."""
  bed_not_ends_with: String
  fromDate: DateTime

  """All values that are not equal to given value."""
  fromDate_not: DateTime

  """All values that are contained in given list."""
  fromDate_in: [DateTime!]

  """All values that are not contained in given list."""
  fromDate_not_in: [DateTime!]

  """All values less than the given value."""
  fromDate_lt: DateTime

  """All values less than or equal the given value."""
  fromDate_lte: DateTime

  """All values greater than the given value."""
  fromDate_gt: DateTime

  """All values greater than or equal the given value."""
  fromDate_gte: DateTime
  toDate: DateTime

  """All values that are not equal to given value."""
  toDate_not: DateTime

  """All values that are contained in given list."""
  toDate_in: [DateTime!]

  """All values that are not contained in given list."""
  toDate_not_in: [DateTime!]

  """All values less than the given value."""
  toDate_lt: DateTime

  """All values less than or equal the given value."""
  toDate_lte: DateTime

  """All values greater than the given value."""
  toDate_gt: DateTime

  """All values greater than or equal the given value."""
  toDate_gte: DateTime
  minMonths: Int

  """All values that are not equal to given value."""
  minMonths_not: Int

  """All values that are contained in given list."""
  minMonths_in: [Int!]

  """All values that are not contained in given list."""
  minMonths_not_in: [Int!]

  """All values less than the given value."""
  minMonths_lt: Int

  """All values less than or equal the given value."""
  minMonths_lte: Int

  """All values greater than the given value."""
  minMonths_gt: Int

  """All values greater than or equal the given value."""
  minMonths_gte: Int
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  bills: Boolean

  """All values that are not equal to given value."""
  bills_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  postedBy: UserWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  chatRoom(where: ChatRoomSubscriptionWhereInput): ChatRoomSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  request(where: RequestSubscriptionWhereInput): RequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  role: Int!
  email: String!
  password: String!
  facebookId: String
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  isVerified: Boolean!
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomCreateManyWithoutPostedByInput
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRoomsInput {
  create: UserCreateWithoutRoomsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLinksInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutRoomsInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomCreateManyWithoutPostedByInput
  links: LinkCreateManyWithoutPostedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  facebookId_ASC
  facebookId_DESC
  isVerified_ASC
  isVerified_DESC
  token_ASC
  token_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetExpires_ASC
  passwordResetExpires_DESC
  birthDay_ASC
  birthDay_DESC
  gender_ASC
  gender_DESC
  occupation_ASC
  occupation_DESC
  studying_ASC
  studying_DESC
  working_ASC
  working_DESC
  images_ASC
  images_DESC
  languages_ASC
  languages_DESC
  userPersonality_ASC
  userPersonality_DESC
  userLifeStyle_ASC
  userLifeStyle_DESC
  userMusic_ASC
  userMusic_DESC
  userSports_ASC
  userSports_DESC
  userMovies_ASC
  userMovies_DESC
  userExtra_ASC
  userExtra_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String
  role: Int!
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean!
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomUpdateManyWithoutPostedByInput
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomUpdateManyWithoutPostedByInput
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
}

input UserUpdateOneWithoutRoomsInput {
  create: UserCreateWithoutRoomsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutRoomsDataInput
  upsert: UserUpsertWithoutRoomsInput
}

input UserUpdateWithoutLinksDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutRoomsDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  rooms: RoomUpdateManyWithoutPostedByInput
  links: LinkUpdateManyWithoutPostedByInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserUpsertWithoutRoomsInput {
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  role: Int

  """All values that are not equal to given value."""
  role_not: Int

  """All values that are contained in given list."""
  role_in: [Int!]

  """All values that are not contained in given list."""
  role_not_in: [Int!]

  """All values less than the given value."""
  role_lt: Int

  """All values less than or equal the given value."""
  role_lte: Int

  """All values greater than the given value."""
  role_gt: Int

  """All values greater than or equal the given value."""
  role_gte: Int
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  facebookId: String

  """All values that are not equal to given value."""
  facebookId_not: String

  """All values that are contained in given list."""
  facebookId_in: [String!]

  """All values that are not contained in given list."""
  facebookId_not_in: [String!]

  """All values less than the given value."""
  facebookId_lt: String

  """All values less than or equal the given value."""
  facebookId_lte: String

  """All values greater than the given value."""
  facebookId_gt: String

  """All values greater than or equal the given value."""
  facebookId_gte: String

  """All values containing the given string."""
  facebookId_contains: String

  """All values not containing the given string."""
  facebookId_not_contains: String

  """All values starting with the given string."""
  facebookId_starts_with: String

  """All values not starting with the given string."""
  facebookId_not_starts_with: String

  """All values ending with the given string."""
  facebookId_ends_with: String

  """All values not ending with the given string."""
  facebookId_not_ends_with: String
  isVerified: Boolean

  """All values that are not equal to given value."""
  isVerified_not: Boolean
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  passwordResetToken: String

  """All values that are not equal to given value."""
  passwordResetToken_not: String

  """All values that are contained in given list."""
  passwordResetToken_in: [String!]

  """All values that are not contained in given list."""
  passwordResetToken_not_in: [String!]

  """All values less than the given value."""
  passwordResetToken_lt: String

  """All values less than or equal the given value."""
  passwordResetToken_lte: String

  """All values greater than the given value."""
  passwordResetToken_gt: String

  """All values greater than or equal the given value."""
  passwordResetToken_gte: String

  """All values containing the given string."""
  passwordResetToken_contains: String

  """All values not containing the given string."""
  passwordResetToken_not_contains: String

  """All values starting with the given string."""
  passwordResetToken_starts_with: String

  """All values not starting with the given string."""
  passwordResetToken_not_starts_with: String

  """All values ending with the given string."""
  passwordResetToken_ends_with: String

  """All values not ending with the given string."""
  passwordResetToken_not_ends_with: String
  passwordResetExpires: DateTime

  """All values that are not equal to given value."""
  passwordResetExpires_not: DateTime

  """All values that are contained in given list."""
  passwordResetExpires_in: [DateTime!]

  """All values that are not contained in given list."""
  passwordResetExpires_not_in: [DateTime!]

  """All values less than the given value."""
  passwordResetExpires_lt: DateTime

  """All values less than or equal the given value."""
  passwordResetExpires_lte: DateTime

  """All values greater than the given value."""
  passwordResetExpires_gt: DateTime

  """All values greater than or equal the given value."""
  passwordResetExpires_gte: DateTime
  birthDay: DateTime

  """All values that are not equal to given value."""
  birthDay_not: DateTime

  """All values that are contained in given list."""
  birthDay_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDay_not_in: [DateTime!]

  """All values less than the given value."""
  birthDay_lt: DateTime

  """All values less than or equal the given value."""
  birthDay_lte: DateTime

  """All values greater than the given value."""
  birthDay_gt: DateTime

  """All values greater than or equal the given value."""
  birthDay_gte: DateTime
  gender: String

  """All values that are not equal to given value."""
  gender_not: String

  """All values that are contained in given list."""
  gender_in: [String!]

  """All values that are not contained in given list."""
  gender_not_in: [String!]

  """All values less than the given value."""
  gender_lt: String

  """All values less than or equal the given value."""
  gender_lte: String

  """All values greater than the given value."""
  gender_gt: String

  """All values greater than or equal the given value."""
  gender_gte: String

  """All values containing the given string."""
  gender_contains: String

  """All values not containing the given string."""
  gender_not_contains: String

  """All values starting with the given string."""
  gender_starts_with: String

  """All values not starting with the given string."""
  gender_not_starts_with: String

  """All values ending with the given string."""
  gender_ends_with: String

  """All values not ending with the given string."""
  gender_not_ends_with: String
  occupation: String

  """All values that are not equal to given value."""
  occupation_not: String

  """All values that are contained in given list."""
  occupation_in: [String!]

  """All values that are not contained in given list."""
  occupation_not_in: [String!]

  """All values less than the given value."""
  occupation_lt: String

  """All values less than or equal the given value."""
  occupation_lte: String

  """All values greater than the given value."""
  occupation_gt: String

  """All values greater than or equal the given value."""
  occupation_gte: String

  """All values containing the given string."""
  occupation_contains: String

  """All values not containing the given string."""
  occupation_not_contains: String

  """All values starting with the given string."""
  occupation_starts_with: String

  """All values not starting with the given string."""
  occupation_not_starts_with: String

  """All values ending with the given string."""
  occupation_ends_with: String

  """All values not ending with the given string."""
  occupation_not_ends_with: String
  studying: String

  """All values that are not equal to given value."""
  studying_not: String

  """All values that are contained in given list."""
  studying_in: [String!]

  """All values that are not contained in given list."""
  studying_not_in: [String!]

  """All values less than the given value."""
  studying_lt: String

  """All values less than or equal the given value."""
  studying_lte: String

  """All values greater than the given value."""
  studying_gt: String

  """All values greater than or equal the given value."""
  studying_gte: String

  """All values containing the given string."""
  studying_contains: String

  """All values not containing the given string."""
  studying_not_contains: String

  """All values starting with the given string."""
  studying_starts_with: String

  """All values not starting with the given string."""
  studying_not_starts_with: String

  """All values ending with the given string."""
  studying_ends_with: String

  """All values not ending with the given string."""
  studying_not_ends_with: String
  working: String

  """All values that are not equal to given value."""
  working_not: String

  """All values that are contained in given list."""
  working_in: [String!]

  """All values that are not contained in given list."""
  working_not_in: [String!]

  """All values less than the given value."""
  working_lt: String

  """All values less than or equal the given value."""
  working_lte: String

  """All values greater than the given value."""
  working_gt: String

  """All values greater than or equal the given value."""
  working_gte: String

  """All values containing the given string."""
  working_contains: String

  """All values not containing the given string."""
  working_not_contains: String

  """All values starting with the given string."""
  working_starts_with: String

  """All values not starting with the given string."""
  working_not_starts_with: String

  """All values ending with the given string."""
  working_ends_with: String

  """All values not ending with the given string."""
  working_not_ends_with: String
  userExtra: String

  """All values that are not equal to given value."""
  userExtra_not: String

  """All values that are contained in given list."""
  userExtra_in: [String!]

  """All values that are not contained in given list."""
  userExtra_not_in: [String!]

  """All values less than the given value."""
  userExtra_lt: String

  """All values less than or equal the given value."""
  userExtra_lte: String

  """All values greater than the given value."""
  userExtra_gt: String

  """All values greater than or equal the given value."""
  userExtra_gte: String

  """All values containing the given string."""
  userExtra_contains: String

  """All values not containing the given string."""
  userExtra_not_contains: String

  """All values starting with the given string."""
  userExtra_starts_with: String

  """All values not starting with the given string."""
  userExtra_not_starts_with: String

  """All values ending with the given string."""
  userExtra_ends_with: String

  """All values not ending with the given string."""
  userExtra_not_ends_with: String
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  facebookId: String
}

type Vote implements Node {
  id: ID!
  link: Link!
  user: User!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  link: LinkCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutLinkInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  link: LinkCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinkInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinkInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutLinkDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutLinkDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutLinkDataInput!
  create: VoteCreateWithoutLinkInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: LinkWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}

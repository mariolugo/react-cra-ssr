# source: https://us1.prisma.sh/mario-lugo-28cf57/database/dev
# timestamp: Mon Sep 03 2018 20:22:30 GMT-0500 (CDT)

type AggregateLink {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""Raw JSON value"""
scalar Json

type Link implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy(where: UserWhereInput): User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateOneWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
}

input LinkCreateWithoutPostedByInput {
  description: String!
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateWithoutVotesInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  delete: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
}

input LinkUpdateOneWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
  delete: Boolean
  update: LinkUpdateWithoutVotesDataInput
  upsert: LinkUpsertWithoutVotesInput
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput!
  create: LinkCreateWithoutVotesInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input LinkWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createVote(data: VoteCreateInput!): Vote!
  createLink(data: LinkCreateInput!): Link!
  createUser(data: UserCreateInput!): User!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteUser(where: UserWhereUniqueInput!): User
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput): BatchPayload!
  updateManyLinks(data: LinkUpdateInput!, where: LinkWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  vote(where: VoteWhereUniqueInput!): Vote
  link(where: LinkWhereUniqueInput!): Link
  user(where: UserWhereUniqueInput!): User
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String
  role: Int!
  email: String!
  password: String!
  facebookId: String
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  isVerified: Boolean!
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLinksInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  firstName: String!
  lastName: String
  role: Int
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkCreateManyWithoutPostedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  facebookId_ASC
  facebookId_DESC
  isVerified_ASC
  isVerified_DESC
  token_ASC
  token_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetExpires_ASC
  passwordResetExpires_DESC
  birthDay_ASC
  birthDay_DESC
  gender_ASC
  gender_DESC
  occupation_ASC
  occupation_DESC
  studying_ASC
  studying_DESC
  working_ASC
  working_DESC
  images_ASC
  images_DESC
  languages_ASC
  languages_DESC
  userPersonality_ASC
  userPersonality_DESC
  userLifeStyle_ASC
  userLifeStyle_DESC
  userMusic_ASC
  userMusic_DESC
  userSports_ASC
  userSports_DESC
  userMovies_ASC
  userMovies_DESC
  userExtra_ASC
  userExtra_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String
  role: Int!
  email: String!
  password: String!
  facebookId: String
  isVerified: Boolean!
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutLinksDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  firstName: String
  lastName: String
  role: Int
  email: String
  password: String
  facebookId: String
  isVerified: Boolean
  token: String
  passwordResetToken: String
  passwordResetExpires: DateTime
  birthDay: DateTime
  gender: String
  occupation: String
  studying: String
  working: String
  images: Json
  languages: Json
  userPersonality: Json
  userLifeStyle: Json
  userMusic: Json
  userSports: Json
  userMovies: Json
  userExtra: String
  links: LinkUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  role: Int

  """All values that are not equal to given value."""
  role_not: Int

  """All values that are contained in given list."""
  role_in: [Int!]

  """All values that are not contained in given list."""
  role_not_in: [Int!]

  """All values less than the given value."""
  role_lt: Int

  """All values less than or equal the given value."""
  role_lte: Int

  """All values greater than the given value."""
  role_gt: Int

  """All values greater than or equal the given value."""
  role_gte: Int
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  facebookId: String

  """All values that are not equal to given value."""
  facebookId_not: String

  """All values that are contained in given list."""
  facebookId_in: [String!]

  """All values that are not contained in given list."""
  facebookId_not_in: [String!]

  """All values less than the given value."""
  facebookId_lt: String

  """All values less than or equal the given value."""
  facebookId_lte: String

  """All values greater than the given value."""
  facebookId_gt: String

  """All values greater than or equal the given value."""
  facebookId_gte: String

  """All values containing the given string."""
  facebookId_contains: String

  """All values not containing the given string."""
  facebookId_not_contains: String

  """All values starting with the given string."""
  facebookId_starts_with: String

  """All values not starting with the given string."""
  facebookId_not_starts_with: String

  """All values ending with the given string."""
  facebookId_ends_with: String

  """All values not ending with the given string."""
  facebookId_not_ends_with: String
  isVerified: Boolean

  """All values that are not equal to given value."""
  isVerified_not: Boolean
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  passwordResetToken: String

  """All values that are not equal to given value."""
  passwordResetToken_not: String

  """All values that are contained in given list."""
  passwordResetToken_in: [String!]

  """All values that are not contained in given list."""
  passwordResetToken_not_in: [String!]

  """All values less than the given value."""
  passwordResetToken_lt: String

  """All values less than or equal the given value."""
  passwordResetToken_lte: String

  """All values greater than the given value."""
  passwordResetToken_gt: String

  """All values greater than or equal the given value."""
  passwordResetToken_gte: String

  """All values containing the given string."""
  passwordResetToken_contains: String

  """All values not containing the given string."""
  passwordResetToken_not_contains: String

  """All values starting with the given string."""
  passwordResetToken_starts_with: String

  """All values not starting with the given string."""
  passwordResetToken_not_starts_with: String

  """All values ending with the given string."""
  passwordResetToken_ends_with: String

  """All values not ending with the given string."""
  passwordResetToken_not_ends_with: String
  passwordResetExpires: DateTime

  """All values that are not equal to given value."""
  passwordResetExpires_not: DateTime

  """All values that are contained in given list."""
  passwordResetExpires_in: [DateTime!]

  """All values that are not contained in given list."""
  passwordResetExpires_not_in: [DateTime!]

  """All values less than the given value."""
  passwordResetExpires_lt: DateTime

  """All values less than or equal the given value."""
  passwordResetExpires_lte: DateTime

  """All values greater than the given value."""
  passwordResetExpires_gt: DateTime

  """All values greater than or equal the given value."""
  passwordResetExpires_gte: DateTime
  birthDay: DateTime

  """All values that are not equal to given value."""
  birthDay_not: DateTime

  """All values that are contained in given list."""
  birthDay_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDay_not_in: [DateTime!]

  """All values less than the given value."""
  birthDay_lt: DateTime

  """All values less than or equal the given value."""
  birthDay_lte: DateTime

  """All values greater than the given value."""
  birthDay_gt: DateTime

  """All values greater than or equal the given value."""
  birthDay_gte: DateTime
  gender: String

  """All values that are not equal to given value."""
  gender_not: String

  """All values that are contained in given list."""
  gender_in: [String!]

  """All values that are not contained in given list."""
  gender_not_in: [String!]

  """All values less than the given value."""
  gender_lt: String

  """All values less than or equal the given value."""
  gender_lte: String

  """All values greater than the given value."""
  gender_gt: String

  """All values greater than or equal the given value."""
  gender_gte: String

  """All values containing the given string."""
  gender_contains: String

  """All values not containing the given string."""
  gender_not_contains: String

  """All values starting with the given string."""
  gender_starts_with: String

  """All values not starting with the given string."""
  gender_not_starts_with: String

  """All values ending with the given string."""
  gender_ends_with: String

  """All values not ending with the given string."""
  gender_not_ends_with: String
  occupation: String

  """All values that are not equal to given value."""
  occupation_not: String

  """All values that are contained in given list."""
  occupation_in: [String!]

  """All values that are not contained in given list."""
  occupation_not_in: [String!]

  """All values less than the given value."""
  occupation_lt: String

  """All values less than or equal the given value."""
  occupation_lte: String

  """All values greater than the given value."""
  occupation_gt: String

  """All values greater than or equal the given value."""
  occupation_gte: String

  """All values containing the given string."""
  occupation_contains: String

  """All values not containing the given string."""
  occupation_not_contains: String

  """All values starting with the given string."""
  occupation_starts_with: String

  """All values not starting with the given string."""
  occupation_not_starts_with: String

  """All values ending with the given string."""
  occupation_ends_with: String

  """All values not ending with the given string."""
  occupation_not_ends_with: String
  studying: String

  """All values that are not equal to given value."""
  studying_not: String

  """All values that are contained in given list."""
  studying_in: [String!]

  """All values that are not contained in given list."""
  studying_not_in: [String!]

  """All values less than the given value."""
  studying_lt: String

  """All values less than or equal the given value."""
  studying_lte: String

  """All values greater than the given value."""
  studying_gt: String

  """All values greater than or equal the given value."""
  studying_gte: String

  """All values containing the given string."""
  studying_contains: String

  """All values not containing the given string."""
  studying_not_contains: String

  """All values starting with the given string."""
  studying_starts_with: String

  """All values not starting with the given string."""
  studying_not_starts_with: String

  """All values ending with the given string."""
  studying_ends_with: String

  """All values not ending with the given string."""
  studying_not_ends_with: String
  working: String

  """All values that are not equal to given value."""
  working_not: String

  """All values that are contained in given list."""
  working_in: [String!]

  """All values that are not contained in given list."""
  working_not_in: [String!]

  """All values less than the given value."""
  working_lt: String

  """All values less than or equal the given value."""
  working_lte: String

  """All values greater than the given value."""
  working_gt: String

  """All values greater than or equal the given value."""
  working_gte: String

  """All values containing the given string."""
  working_contains: String

  """All values not containing the given string."""
  working_not_contains: String

  """All values starting with the given string."""
  working_starts_with: String

  """All values not starting with the given string."""
  working_not_starts_with: String

  """All values ending with the given string."""
  working_ends_with: String

  """All values not ending with the given string."""
  working_not_ends_with: String
  userExtra: String

  """All values that are not equal to given value."""
  userExtra_not: String

  """All values that are contained in given list."""
  userExtra_in: [String!]

  """All values that are not contained in given list."""
  userExtra_not_in: [String!]

  """All values less than the given value."""
  userExtra_lt: String

  """All values less than or equal the given value."""
  userExtra_lte: String

  """All values greater than the given value."""
  userExtra_gt: String

  """All values greater than or equal the given value."""
  userExtra_gte: String

  """All values containing the given string."""
  userExtra_contains: String

  """All values not containing the given string."""
  userExtra_not_contains: String

  """All values starting with the given string."""
  userExtra_starts_with: String

  """All values not starting with the given string."""
  userExtra_not_starts_with: String

  """All values ending with the given string."""
  userExtra_ends_with: String

  """All values not ending with the given string."""
  userExtra_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  facebookId: String
}

type Vote implements Node {
  id: ID!
  link(where: LinkWhereInput): Link!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  link: LinkCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutLinkInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  link: LinkCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  link: LinkUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinkInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinkInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutLinkDataInput {
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  link: LinkUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutLinkDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutLinkDataInput!
  create: VoteCreateWithoutLinkInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: LinkWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
